service:
  name: serverless-goodreads-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-plugin-canary-deployments
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
      APP_NAME: serverless-goodreads-app
      REVIEWS_TABLE: Reviews-${self:provider.stage}
      REVIEW_ID_INDEX: ReviewIdIndex
      REVIEWS_S3_BUCKET: serverless-review-app-dayvaz-${self:provider.stage}
      SIGNED_URL_EXPIRATION: 300
      AUTH0_JWK_URL: https://dev--8u8qrli.us.auth0.com/.well-known/jwks.json

custom:
  topicName: reviewsTopic-${self:provider.stage}

  serverless-offline:
    port: 3003

  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: REVIEW APP API
        description: Serverless application for review sharing
    models:
      - name: CreateReviewRequest
        contentType: application/json
        schema: ${file(models/create-review-request.json)}
      - name: UpdateReviewRequest
        contentType: application/json
        schema: ${file(models/update-review-request.json)} 

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function
  GetReviews:
    handler: src/lambda/http/getReviews.handler
    events:
      - http:
          method: get
          path: reviews
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-review-get-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.REVIEW_ID_INDEX}
      - Effect: Allow # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  CreateReview:
    handler: src/lambda/http/createReview.handler
    events:
      - http:
          method: post
          path: reviews
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new review item
            description: Create a new review item
            requestModels:
              'application/json': CreateReviewRequest
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-review-create-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  # TODO: Configure this function
  UpdateReview:
    handler: src/lambda/http/updateReview.handler
    events:
      - http:
          method: patch
          path: reviews/{reviewId}
          cors: true
          authorizer: Auth
          reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update review item
            description: Update review item
            requestModels:
              'application/json': UpdateReviewRequest
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-review-upd-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.REVIEW_ID_INDEX}
      - Effect: Allow # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  # TODO: Configure this function
  DeleteReview:
    handler: src/lambda/http/deleteReview.handler
    events:
      - http:
          method: delete
          path: reviews/{reviewId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-review-delete-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}   
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.REVIEW_ID_INDEX} 
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: "arn:aws:s3:::${self:provider.environment.REVIEWS_S3_BUCKET}/*"
      - Effect: Allow # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"
    
  # TODO: Configure this function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: reviews/{reviewId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-review-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.REVIEW_ID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: "arn:aws:s3:::${self:provider.environment.REVIEWS_S3_BUCKET}/*"
      - Effect: Allow # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"

  UpdateReviewAttachment:
    handler: src/lambda/sns/updateReviewAttachment.handler
    events:
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatementsName: ${self:provider.environment.APP_NAME}-review-url-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.REVIEWS_TABLE}/index/${self:provider.environment.REVIEW_ID_INDEX}
      - Effect: Allow # xray permissions (required)
        Action:
          - xray:PutTraceSegments
          - xray:PutTelemetryRecords
        Resource:
          - "*"
    

resources:
  Resources:
    # TODO: Add any necessary AWS resources
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    ReviewsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: reviewId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: reviewId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.REVIEWS_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.REVIEW_ID_INDEX}
            KeySchema:
              - AttributeName: reviewId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    ReviewAttachmentsBucket:
      Type: AWS::S3::Bucket 
      DependsOn: SNSTopicPolicy    
      Properties:
        BucketName: ${self:provider.environment.REVIEWS_S3_BUCKET}  
        NotificationConfiguration:
          TopicConfigurations:
            - Event: s3:ObjectCreated:Put
              Topic: !Ref ReviewTopic
        CorsConfiguration:
          CorsRules:
            - 
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300

    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                AWS: "*"
              Action: sns:Publish
              Resource:
                !Ref ReviewTopic
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.REVIEWS_S3_BUCKET}
        Topics:
          - !Ref ReviewTopic

    ReviewTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Review bucket topic
        TopicName: ${self:custom.topicName}
    
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.REVIEWS_S3_BUCKET}/*'
        Bucket: !Ref ReviewAttachmentsBucket